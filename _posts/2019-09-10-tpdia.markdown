---
layout: post
title:  "Tpdia"
date:   2019-09-10 23:12:50 +0100
featured-img: tpdia
---
Analiza Naukowo-Badawcza (ANB)
Raport z analizy weryfikującej i nowego rozwiązania
Jacek Blady
Piotr Gazda
Wstęp
Publikacja skupia się na badaniu ruchu użytkownika, przedstawia rozwiązanie
problemu ekstrakcji cech i klasyfikacji trajektorii różnych środków transportu. Badania
skupiają się na analizie i odpowiednim przygotowaniu surowych trajektorii pobranych z bazy
danych GeoLife oraz zaklasyfikowaniu ich do danego środka transportu przy pomocy
głębokich sieci neuronowych. Według autora estymacja środka transportu pozytywnie
wpłynie na wiele obszarów badań, takich jak osobiste seriwsy wyznaczania trasy i
odzwyskiwanie danych geograficznych.
Przegląd publikacji
Publikacja, na podstawie której zostało przeprowadzone badanie to “Classifying
spatial trajectories using representational learning”, napisana przez Yuki Endo, Hiroyuki
Toda, Kyosuke Nishida i Jotaro Ikedo.
Zaproponowane rozwiązanie bardzo dobrze radzi sobie z problemem klasyfikacji trajektorii.
Z badań wynika, że głębokie sieci neuronowe dobrze radzą sobie z analizą obrazów, dlatego
autorzy zdecydowali się przekształcić trajektorie i reprezentować je w formie graficznej.
Obraz wykorzystuje skalę szarości, piksele o barwie innej niż czarna pokazują przebieg
trasy. Taki format pozwala na zapis informacji o czasie - im jaśniejszy piksel więcej czasu
użytkownik spędził w danym miejscu. Tak przygotowane obrazy przekazywane są głębokiej
sieci neuronowej, gdzie następuje automatyczna ekstrakcja cech. Sieć neuronowa uczy się
rozpoznawać cechy wyróżniające dane sposoby transportu i według automatycznie
wyuczonych reguł klasyfikuje obrazy do wyodrębnionych klas. Publikacja odrzuca cztery
etykiety środków transportu ze względu na niewielką liczbę danych, w naszym rozwiązaniu
postąpiliśmy podobnie, jednak zdecydowaliśmy się zachować większość innych danych.
Rozwiązanie
Postanowiliśmy podzielić projekt na dwa programy. Pierwszy z nich zajmuje się
przekształceniem surowych trajektorii w obrazy gotowe do przekazania sieci neuronowej.
Program ten został napisany w języku Java. Drugi program napisany w języku Python
zajmuje się trenowaniem sieci neuronowej i walidacją modelu. Zdecydowaliśmy się na to
środowisko głównie ze względu na wsparcie bibliotek zewnętrznych, które implementują
interfejs umożliwiający pracę z głębokimi sieciami neuronowymi.
Opis danych
Zbiór danych GeoLife zawierają informacje o trasach, zebranych przez Microsoft
Research Asia przebytych przez 182 użytkowników w okresie kwiecień 2007 - sierpień 2012.
Trajektorie reprezentowane są jako zbiory punktów, odzwierciedlających położenie
użytkownika w danym czasie. Dane zapisane są w plikach .plt, które zawierają informacje w
następującej formie:
● linijki od 1-6 mogą zostać pominięte - stanowią nagłówek trasy
Kolejne linijki zawierają pola oddzielone przecinkami:
● pole 1: szerokość geograficzna w stopniach
● pole 2: długość geograficzna w stopniach
● pole 3: wszędzie wartość równa 0, nieistotne w tym zbiorze danych
● pole 4: wysokość w stopach
● pole 5: data jako liczba dni, które upłynęły od 30.12.1899
● pole 6: data jako tekst
● pole 7: czas jako tekst
Dane zostały zebrane z różnych urządzeń, przez co czas pomiędzy zapisem kolejnych
punktów może się różnić na różnych trasach. Trajektorie obejmują obszar 30 miast Chin
oraz kilku z Europy i USA.
Do surowych trajektorii zostały załączone również etykiety z informacją o środku transportu
w danym wycinku czasu. Trasy, które nie posiadają takich etykiety zostały przez nas
odrzucone i nie brały udziału w badaniu.
W ramach tych plików wyróżnione zostały następujące środki transportu:
● WALK - chód
● BIKE - rower
● BUS - autobus
● CAR - samochód
● SUBWAY - metro
● TRAIN - pociąg
● TAXI - taksówka
● AIRPLANE - samolot
● BOAT - łódź
● RUN - bieg
● MOTORCYCLE - motocykl
Ze względu na niewielką liczbę odczytów odrzucone zostały również dane dotyczące
samolotów, statków, biegu oraz motocyklu.
Segmentacja i przygotowanie danych
Przygotowanie danych polega na zmianie plików .plt w obrazy w formacie .png.
Według autorów artykułu głęboka sieć neuronowa dobrze radzi sobie z plikami w postaci
obrazu, dlatego zdecydowaliśmy się na to przekształcenie.
Proces ten można podzielić na kilka etapów:
● Segmentacja - na początku dane muszą zostać poddane segmentacji. Godzina
rozpoczęcia i zakończenia danego segmentu zostaje pobrana z pliku, zawierającego
etykiety. Wszystkie punkty znajdujące się w tym przedziale czasowym stanowią
jeden segment. Kolejne etapy zostają wykonane na pojedynczych segmentach, co
oznacza, że z każdego z nich powstanie jeden obraz, który będzie zaklasyfikowany
do jednego ze środków transportu.
● Próbkowanie - następnie w celu ustawienia równych odcinków czasu pomiędzy
punktami trasy należy poddać ją próbkowaniu. Czas próbkowania w naszym
rozwiązaniu wynosił 1 sekundę, co oznacza, że w przypadku przerw między
odczytami większych niż ta wartość zostały dodane nowe punkty, w celu zapełnienia
tego okresu. Wartości dodanych punktów są kopiowane z wcześniejszego odczytu.
Na przykład:
szerokość długość czas
przed próbkowaniem:
39.927017, 116.33763, 2008-10-25,01:02:05
39.926029, 116.336472, 2008-10-25,01:02:10
po próbkowaniu:
39.927017, 116.33763, 2008-10-25,01:02:05
39.927017, 116.33763, 2008-10-25,01:02:06
39.927017, 116.33763, 2008-10-25,01:02:07
39.927017, 116.33763, 2008-10-25,01:02:08
39.927017, 116.33763, 2008-10-25,01:02:09
39.926029, 116.336472, 2008-10-25,01:02:10
● Przycinanie - następnie w celu ujednolicenia danych rozpatrywany obszar zostaje
przycięty w taki sposób, aby wszystkie trasy zawierały dane z terenów o takich
samych rozmiarach. Wyznaczony zostaje środek trasy (średnia arytmetyczna
szerokości i długości geograficznych wszystkich punktów trajektorii). Później
wszystkie punkty, które znajdują się w większej odległości od punktu środkowego niż
zadana wartość (w naszym rozwiązaniu wynosi ona 0.06 stopnia) zostają odrzucone.
● Przypisanie punktów do pikseli - tak przygotowana trasa może zostać poddana
przekształceniu w obraz. Należy teraz przypisać poszczególne punkty trajektorii do
pikseli obrazu wyjściowego. Na wejściu programu podawana jest szerokości i
długość obrazu w liczbie pikseli (w naszym rozwiązaniu rozdzielczość została
ustawiona na 48x48). Obszar występowania punktów, zdefiniowany przez limity
wyznaczone w poprzednim punkcie dzielony jest na tyle równych części ile pikseli ma
znajdować się w obrazie wyjściowym. Utworzona zostaje tablica o wymiarach
odpowiadających rozdzielczości obrazu, do której zliczane zostają punkty znajdujące
się w danym wycinku obszaru występowania trasy. Po tym etapie tablica zawierająca
liczności punktów występujących w danych wycinkach jest gotowa do
przekształcenia w obraz graficzny.
● Przypisanie wartości pikselom - ostatnim etapem procesu zmiany trajektorii w obraz
jest utworzenie samego obrazu. Wartości w tablicy utworzone w poprzednim kroku
zostają poddane normalizacji, gdzie wartość największa zostaje zmieniona na 255,
proporcjonalnie modyfikowane są pozostałe wartości. Następnie na podstawie tablicy
przypisane zostają wartości koloru każdego piksela, jak można zauważyć komórki
zawierające wyższe wartości zostaną odwzorowane na jaśniejsze piksele, co
przekłada się na zapis informacji o czasie spędzonym w danym miejscu.
Zmienne, które wpływają na obraz wyjściowy:
● rozmiar obrazu - rozdzielczość wyjściowego obrazu, w pikselach
● rozmiar wycinka - rozmiar rozpatrywanego odcinka trasy, w stopniach szerokości i
długości geograficznej
● czas próbkowania - okres pomiędzy jednym punktem a kolejnym po procesie
próbkowania, w sekundach
Przykładowe obrazy wyjściowe:
Wykorzystane biblioteki zewnętrzne
Jak już wspominaliśmy zdecydowaliśmy się na prace z językiem Python ze względu
na potężnej zaplecze w dziedzinie uczenia maszynowego i sieci neuronowych. W
szczególności zależało nam na wykorzystaniu bibliotek:
● Tensorflow - otwartoźródłowa biblioteka programistyczna napisana przez Google Brain
Team. Wykorzystywana jest w uczeniu maszynowym i głębokich sieciach neuronowych.
Biblioteka może do działania wykorzystywać zarówno karty graficzne, procesory (m.in.
dla urządzeń mobilnych oraz systemów wbudowanych), jak i wyspecjalizowane
mikroprocesory
● Keras - to biblioteka skupiona na sieciach neuronowych typu open source napisana
w języku Python. Może współdziałać z TensorFlow, Microsoft Cognitive Toolkit,
Theano lub PlaidML. Zaprojektowana, aby umożliwić szybkie eksperymentowanie z
głębokimi sieciami neuronowymi. Została opracowana w ramach prac badawczych
projektu ONEIROS (Neuroelektroniczny inteligentny system operacyjny robotów
elektronicznych), a jego głównym autorem i opiekunem jest François Chollet, inżynier
Google.
● NumPy - jedno z najbardziej popularnych narzędzi w środowisku Python. Dodaje
obsługę dużych, wielowymiarowych tablic i macierzy, a także duży zbiór funkcji
matematycznych wysokiego poziomu do obsługi struktur tablicowych.
Uczenie i klasyfikacja
Dane przygotowywane przez program napisany w języku Java zapisywane są do
folderów opisanych nazwami środka transportu wykorzystanego na danym obrazie.
Następnie program uczący wczytuje dane z folderów i stosując techniki Data Augumentation
powiększa zbiór danych treningowych.
Data Augumentation - są to techniki mające na celu powiększenie posiadanego zbioru
danych przez zastosowanie na tych danych odpowiednich modyfikacji. Najczęściej techniki
tego rodzaju są stosowane w programach związanych z obrazami. Przykładowymi rodzajami
takich metod mogą być na przykład wykonanie na obrazach: rotacji, odbicia symetrycznego,
przybliżenia, wycięcia, zmiany kontrastu.
W wykonywanych testach sprawdzano efekty otrzymywane przez wykonanie rotacji,
lustrzanego odbicia, przycinania i przybliżania danych na obrazach. Testy wykonane przez
grupę wykazały pozytywny wpływ generowania dodatkowych danych przez rotację i odbicia,
nie dostrzeżono, jednak pozytywnego wpływu przycinania i przybliżania obrazów. Sieć
neuronowa wykorzystana w ostatecznym rozwiązaniu składała się z trzech warstw
konwolucyjnych i czterech w pełni połączonych. Wszystkie warstwy oprócz ostatniej
wykorzystują funkcję aktywacyjną ReLU.
Funkcja aktywacyjna ReLU - dla wartości poniżej 0 przyjmuje wartość równą 0, a powyżej 0
funkcja przyjmuje postać funkcji tożsamościowej.
W ostatniej warstwie wykorzystano funkcję softmax, świetnie sprawdzająca się w
problemach klasyfikacyjnych, w których chcemy otrzymać prawdopodobieństwo
przyporządkowania danych wejściowych do danej klasy. Wykonane zostały testy, mające na
celu ustalenie właściwych rozmiarów poszczególnych warstw. Wykorzystaną przez nas
funkcją błędu była funkcja krosentropii, ponieważ jest ona świetnym wyborem w problemach
klasyfikacyjnych. Obliczenie krosentropi w naszym zadaniu ogranicza się do obliczenia
-log(x), gdzie x jest wartością prawdopodobieństwa zdarzenia, którego klasy uczymy.
Funkcja ta zwykle występuje w parze z funkcja aktywacyjną softmax. W procesie uczenia
wykorzystano optymalizator adam oraz dropout o wartości 0.5 na przedostatniej warstwie
sieci neuronowej. Dropout jest techniką polegającą na zerowaniu wartości losowo
wybranego neuronu w celu uniknięcia przeuczenia sieci neuronowej. Dokładny opis
podsumowujący architekturę sieci przedstawia rysunek poniżej.
Weryfikacja
Przed wygenerowaniem obrazów podzieliliśmy użytkowników na 5 grup, w celu
wykonania w pełni wiarygodnej metody kroswalidacji. W ten sposób otrzymaliśmy grupy
danych pochodzących z różnych źródeł w pełni niezależnych od siebie co jest kluczowe w
celu dokładnego przetestowania modelu. Korzystając z tej metody wykonaliśmy trening
pięciu modeli, za każdym razem testując model na innej części i wykorzystując do treningu
pozostałe cztery. Podział ze względu na użytkowników ma jednak wadę w postaci nierównej
obecności danych treningowych różnych klas w grupie, np w grupie nr 4 otrzymaliśmy
nadreprezentację danych dotyczących reprezentacji trajektorii samochodów co
spowodowało trudności w fazie testowania.
Wyniki i wnioski
Otrzymane przez nas wyniki w procesie kroswalidacji przedstawiono w poniższej
tabeli:
Grupa 1 Grupa 2 Grupa 3 Grupa 4 Grupa 5 Średnio
0,607 0,668 0,666 0,416 0,625 0,596
Niższy wynik w grupie 4 wynika z faktu, że w danej grupie znajduje się ponad połowa
wszystkich danych treningowych dla trajektorii samochodów. Sytuacja jest niestety trudna w
rozwiązaniu przy założeniu rozdzielenia opartego na podziale użytkowników, ponieważ
bardzo duża część danych dotyczących trajektorii samochodów została dostarczona przez
jednego użytkownika numer 128.
Wykonane wykresy prezentujące precyzję klasyfikacji podczas uczenia sieci neuronowej dla
jednej z grup. Pierwszy wykres przedstawia precyzję na zbiorze treningowym, a drugi na
testowym:
Jak widać polepszające się wyniki na zbiorze treningowym, nie zawsze oddają polepszenie
wyników na zbiorze testowym. Szczególnym trudnym problemem było podzielenie
użytkowników na grupy w taki sposób, żeby w każdej grupie była podobna ilość danych
każdej kategorii, co jest jedną z przyczyn dużych wahań wyników na zbiorze testowym.
● Zaproponowane przez nas rozwiązanie dobrze radzi sobie z przedstawionym
problemem. Otrzymane przez nas wyniki są bliskie wynikom uzyskanym przez
badaczy w przytoczonej publikacji.
● Dzięki zmianie reprezentacji danych z trajektorii GPS na obrazy trajektorii głęboka
sieć neuronowa jest w stanie lepiej przetworzyć zbiór danych.
● Chociaż na podstawie wygenerowanych obrazów można ręcznie utworzyć cechy,
które sprawdziłyby się dobrze, jednak podejście, które wykorzystuje głębokie sieci
neuronowe pozwala na generalizację problemu i automatyzację procesu tworzenie
modelu.
● Na podstawie powyższych badań stwierdzono, że wyniki są mocno wrażliwe na zbiór
danych, przed rozpoczęciem uczenia należy przeanalizować pozyskany zbiór danych
i odrzucić te wartości, które nie wnoszą wiele informacji lub niewiele wnoszą do
zbioru.
● Po utworzeniu modelu generacja obrazu trajektorii i estymacja działa bardzo
sprawnie, przez co możliwe jest oszacowanie środka transportu w czasie
rzeczywistym.
● Przedstawiona metoda nie wymaga żadnych dodatkowych informacji poza surowymi
trajektoriami GPS, starsze podejścia wymagały od użytkownika przekazania
dodatkowych informacji sensorycznych, co wiązało się z wieloma problemami natury
technicznej.
● Zapis trajektorii GPS w postaci obrazu pozwala na przechowanie większości
zapisanych informacji, jednak należy uważać na parametry takie jak rozdzielczość
obrazu czy rozmiar analizowanego wycinka obszaru geograficznego, które to mogą
w znaczący sposób przyczynić się do utracenia informacji o danej trasie.
● W celu wyznaczenia wszystkich środków transportu na danej trasie należałoby ją
podzielić na pewne segmenty, w najlepszym przypadku kończące i zaczynające się
w chwili zmiany środka transportu.