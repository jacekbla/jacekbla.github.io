---
layout: post
title:  "Klasyfikacja trajektorii środków transportu"
date:   2019-09-10 23:12:50 +0100
featured-img: tpdia
---
## Cel projektu
Projekt skupia się na badaniu ruchu użytkownika, przedstawia rozwiązanie problemu ekstrakcji cech i klasyfikacji trajektorii różnych środków transportu. Badania skupiają się na analizie i odpowiednim przygotowaniu surowych trajektorii pobranych z bazy danych GeoLife oraz zaklasyfikowaniu ich do danego środka transportu przy pomocy głębokich sieci neuronowych. Celem pracy był przegląd, implementacja oraz analiza rozwiązania zaproponowanego w artykule. Zadanie zostało zrealizowane w dwuosobowym zespole. Byłem odpowiedzialny za pierwszą część pracy - przygotowanie danych.

## Przegląd publikacji
Publikacja, na podstawie której zostało przeprowadzone badanie to **“Classifying spatial trajectories using representational learning”**, napisana przez Yuki Endo, Hiroyuki Toda, Kyosuke Nishida i Jotaro Ikedo.
Z badań wynika, że głębokie sieci neuronowe dobrze radzą sobie z analizą obrazów, dlatego autorzy zdecydowali się przekształcić trajektorie i reprezentować je w formie graficznej. Obraz wykorzystuje skalę szarości, piksele o barwie innej niż czarna pokazują przebieg trasy. Taki format pozwala na zapis informacji o czasie - im jaśniejszy piksel tym więcej czasu użytkownik spędził w danym miejscu. Tak przygotowane obrazy przekazywane są głębokiej sieci neuronowej, gdzie następuje automatyczna ekstrakcja cech. Sieć neuronowa uczy się rozpoznawać cechy wyróżniające dane sposoby transportu i według automatycznie wyuczonych reguł klasyfikuje obrazy do wyodrębnionych klas.

## Rozwiązanie
Postanowiliśmy podzielić projekt na dwa programy. Pierwszy z nich zajmuje się przekształceniem surowych trajektorii w obrazy gotowe do przekazania sieci neuronowej. Program ten został napisany w języku **Java**. Drugi program napisany w języku **Python** zajmuje się trenowaniem sieci neuronowej i walidacją modelu. Zdecydowaliśmy się na to środowisko głównie ze względu na wsparcie bibliotek zewnętrznych, które implementują interfejs umożliwiający pracę z głębokimi sieciami neuronowymi.

### Segmentacja i przygotowanie danych
Przygotowanie danych polega na przekształceniu plików .plt w obrazy w formacie .png.

![](https://raw.githubusercontent.com/jacekbla/jacekbla.github.io/master/assets/img/posts/content/tpdia/img_gen.jpg)

Proces ten można podzielić na kilka etapów:
- Segmentacja - wszystkie punkty znajdujące się w danym przedziale czasowym zapisane zostają jako jeden segment.
- Próbkowanie - następnie w celu ustawienia równych odcinków czasu pomiędzy punktami trasy należy poddać ją próbkowaniu.
- Przycinanie - następnie w celu ujednolicenia danych rozpatrywany obszar zostaje przycięty w taki sposób, aby wszystkie fragmenty trasy zawierały dane z terenów o takich samych rozmiarach.
- Przypisanie punktów do pikseli - należy teraz przypisać poszczególne punkty trajektorii do pikseli obrazu wyjściowego. Utworzona zostaje tablica o wymiarach odpowiadających rozdzielczości obrazu, do której zliczane zostają punkty znajdujące się w danym wycinku obszaru występowania trasy. Po tym etapie tablica zawierająca liczności punktów występujących w danych wycinkach jest gotowa do przekształcenia w obraz graficzny.

![](https://raw.githubusercontent.com/jacekbla/jacekbla.github.io/master/assets/img/posts/content/tpdia/img_gen2.jpg)

- Przypisanie wartości pikselom - wartości w tablicy utworzone w poprzednim kroku zostają poddane normalizacji. Następnie na podstawie tablicy przypisane zostają wartości koloru każdego piksela.

Przykładowe obrazy wyjściowe:
![](https://raw.githubusercontent.com/jacekbla/jacekbla.github.io/master/assets/img/posts/content/tpdia/example_imgs.jpg)

### Wykorzystane biblioteki zewnętrzne
Jak już zostało wspomniane zdecydowaliśmy się na pracę z językiem **Python** ze względu na potężne zaplecze w dziedzinie uczenia maszynowego i sieci neuronowych. W szczególności zależało nam na wykorzystaniu następujących bibliotek:
- Tensorflow
- Keras
- NumPy

### Uczenie i klasyfikacja
Przygotowane dane, opatrzone etykietami, zapisywane są do folderów opisanych nazwami środka transportu. Następnie program uczący wczytuje dane z folderów i stosując techniki **Data Augumentation** powiększa zbiór danych treningowych.

W wykonywanych testach sprawdzano efekty otrzymywane przez wykonanie rotacji, lustrzanego odbicia, przycinania i przybliżania danych na obrazach. Testy wykonane przez grupę wykazały pozytywny wpływ generowania dodatkowych danych przez rotację i odbicia, nie dostrzeżono jednak pozytywnego wpływu przycinania i przybliżania obrazów. Sieć neuronowa wykorzystana w ostatecznym rozwiązaniu składała się z trzech warstw konwolucyjnych i czterech w pełni połączonych. Wszystkie warstwy oprócz ostatniej wykorzystują funkcję aktywacyjną **ReLU**.

W ostatniej warstwie wykorzystano funkcję **softmax**. Wykonane zostały testy, mające na celu ustalenie właściwych rozmiarów poszczególnych warstw. Wykorzystaną przez nas funkcją błędu była funkcja cross-entropy. W procesie uczenia wykorzystano optymalizator **adam** oraz **dropout** o wartości 0.5 na przedostatniej warstwie sieci neuronowej.

### Weryfikacja
Przed wygenerowaniem obrazów podzieliliśmy użytkowników na pięć grup, w celu wykonania w pełni wiarygodnej metody walidacji krzyżowej. W ten sposób otrzymaliśmy grupy danych pochodzących z różnych, w pełni niezależnych od siebie źródeł. Korzystając z tej metody wykonaliśmy trening pięciu modeli, za każdym razem testując model na innej części i wykorzystując do treningu pozostałe cztery. Podział ze względu na użytkowników ma jednak wadę w postaci nierównej obecności danych treningowych różnych klas w grupie, np. w grupie nr 4 otrzymaliśmy nadreprezentację danych dotyczących reprezentacji trajektorii samochodów co spowodowało trudności w fazie testowania.